{% extends 'base.html.twig' %}

{% block title %}Jirama | Nouvelle coupure{% endblock %}

{% block othercss %}
    <link rel="stylesheet" href="{{ asset('css/style.map.css') }}">
    <link rel="stylesheet" href="{{ asset('leaflet/leaflet.css') }}">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-fullscreen/dist/leaflet.fullscreen.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.pm@latest/dist/leaflet.pm.css" /> <!-- Leaflet-Geoman CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
{% endblock %}

{% block menuactive %}coupure{% endblock %}

{% block body %}
    <div class="content">
        <div class="py-4 px-3 px-md-4">
            <div class="card mb-3 mb-md-4">
                <div class="card-body">
                    <!-- Breadcrumb -->
                    <nav class="d-none d-md-block" aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a href="/">Coupure</a>
                            </li>
                            <li class="breadcrumb-item active" aria-current="page">Nouveau</li>
                        </ol>
                    </nav>
                    <!-- End Breadcrumb -->

                    <div class="mb-3 mb-md-4 d-flex justify-content-between">
                        <div class="h3 mb-0">Nouvelle prévision de coupure</div>
                    </div>

                    <!-- Form -->
                    <div>
                        <div id="tabsContent2" class="card-body tab-content p-0">
                            <div class="tab-pane fade show active" id="tabs2-tab1" role="tabpanel">
                                <div>
                                    <form method="post" action="{{ path('new_coupure_do') }}">
                                        <div class="form-row">
                                            <div class="form-group col-12 col-md-6">
                                                <label for="datedebut">Date début</label>
                                                <input type="datetime-local" class="form-control" id="datedebut" name="datedebut">
                                            </div>
                                            <div class="form-group col-12 col-md-6">
                                                <label for="datefin">Date fin</label>
                                                <input type="datetime-local" class="form-control" id="datefin" name="datefin">
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-12 col-md-6">
                                                <label for="type">Secteur</label>
                                                <select class="custom-select" id="type" name="refsecteur">
                                                    <option value="">Choisissez...</option>
                                                    {% for secteur in secteurs %}
                                                    <option value="{{ secteur.refSecteur }}">{{ secteur.refSecteur }}</option>
                                                    {% endfor %}
                                                </select>
                                            </div>
                                            <div class="form-group col-12 col-md-6">
                                                <label for="reference">Specificitée <i class="gd-help-alt icon-sm2 ml-2" data-toggle="tooltip" data-placement="top" title="Ce champ peut etre générée automatiquement en fonction du zone ou bien par votre saisie"></i></label>
                                                <input type="text" placeholder="hopital:2;prison:0;abonnee:0" class="form-control" id="spec" name="spec">
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-12 col-md-6">
                                                <label for="division">Division</label>
                                                <input type="text" class="form-control" id="division" name="division">
                                            </div>
                                            <div class="form-group col-12 col-md-6">
                                                <label for="sa">SA</label>
                                                <input type="text" class="form-control" id="sa" name="sa">
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-12 col-md-12">
                                                <label for="motif">Motif</label>
                                                <textarea class="form-control" name="motif" id="motif" rows="3"></textarea>
                                            </div>
                                        </div>
                                        <div id="borderedAccordion">
                                            <div class="accordion accordion-bordered-y accordion-stacked pl-0">
                                                <header id="borderedAccordion-heading-1" class="accordion-header pointer pl-0" aria-expanded="true" aria-controls="borderedAccordion-1"
                                                    data-toggle="collapse"
                                                    data-target="#borderedAccordion-1">
                                                    <i class="gd-pin-2 accordion-icon icon-text mr-2"></i>
                                                    <h5 class="mb-0">Postes coupées</h5>
                                                    <i class="accordion-control gd-angle-down icon-text ml-auto"></i>
                                                </header>

                                                <div id="borderedAccordion-not" class="collapse show" aria-labelledby="borderedAccordion-heading-1"
                                                    data-parent="#borderedAccordion">
                                                    <div class="accordion-body pl-0">
                                                        <div class="col-md-12 mt-1">
                                                            <span id="postes-container"></span>
                                                            <!-- Votre HTML initial -->
                                                            <span class="badge badge-pill badge-complex bg-semi-soft-primary-darker text-white">
                                                                <span class="badge badge-sm badge-primary-darker rounded-circle mr-2 pointer"><i class="gd-plus" id="add-postcoupee-submit" style="font-size: 0.7em"></i></span>
                                                                <span>
                                                                    <input class="b-none bg-transparent input-add-postecoupee" style="color: white !important;" name="postcoupeex" type="text" list="postes-list">
                                                                    <input name="postescoupee" type="hidden" id="postcoupee-value">
                                                                </span>
                                                                <datalist id="postes-list">
                                                                    <!-- Les options seront ajoutées ici par JavaScript -->
                                                                </datalist>
                                                            </span>

                                                            <!-- Conteneur pour les postes ajoutés -->
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="borderedAccordion2">
                                            <div class="accordion accordion-bordered-y accordion-stacked pl-0">
                                                <header id="borderedAccordion-heading-2" class="accordion-header pointer pl-0" aria-expanded="true" aria-controls="borderedAccordion-2"
                                                    data-toggle="collapse"
                                                    data-target="#borderedAccordion-2">
                                                    <i class="gd-location-pin accordion-icon icon-text mr-2"></i>
                                                    <h5 class="mb-0">Lieu(x)</h5>

                                                    <div class="ml-4">
                                                        <i class="gd-location-arrow accordion-icon icon-text mr-2 ml-auto"></i>
                                                        <input class="b-none h5 mb-0" id="ref-zone" name="ref-zone" type="text" placeholder="Référence du zone">
                                                    </div>
                                                    <i class="accordion-control gd-angle-down icon-text ml-auto"></i>
                                                </header>

                                                <div id="borderedAccordion-not" class="collapse show" aria-labelledby="borderedAccordion-heading-2"
                                                    data-parent="#borderedAccordion2">
                                                    <div class="accordion-body pl-0">
                                                        <div class="col-md-12">
                                                            <span id="lieu-list-container"></span>
                                                            <!-- Votre HTML initial -->
                                                            <span class="badge badge-pill badge-complex bg-semi-soft-primary text-white mt-1">
                                                                <span class="badge badge-sm badge-primary rounded-circle mr-2 pointer" onclick="addMultiInputElement('input-add-lieu', 'primary', 'lieu-list')"><i class="gd-plus" style="font-size: 0.7em"></i></span>
                                                                <span>
                                                                    <input class="b-none bg-transparent input-add-lieu input-width-focus" name="postcoupeex" type="text" list="lieu-list">
                                                                    <input name="postescoupee" type="hidden" id="lieu-list-value" name="lieux">
                                                                </span>
                                                                <datalist id="lieu-list">
                                                                    <!-- Les options seront ajoutées ici par JavaScript -->
                                                                </datalist>
                                                            </span>

                                                            <!-- Conteneur pour les postes ajoutés -->
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-row mt-4 border-top pt-4 mb-1">
                                            <i class="gd-map accordion-icon icon-text mr-2"></i>
                                            <h5 class="">Carte</h5>
                                            <a class="b-none ml-auto pointer link-dark" data-toggle="modal" data-target="#search">
                                                <i class="gd-list accordion-icon icon-text mr-2"></i>
                                            </a>
                                            <div class="form-group col-12 col-md-12 d-none">
                                                <label for="coord">coord(pv)</label>
                                                <input type="text" class="form-control" id="coords" name="coords" readonly>
                                                {# <input type="text" class="form-control" id="specificite" name="specificite" value="hopital:1;prison:0;abonnee:0"> #}
                                                <input type="text" class="form-control" id="idzone" name="idzone" value="0">
                                            </div>
                                        </div>
                                        <div id="result-tag-clouds" class="tag-clouds">
                                                <!-- List des zones -->
                                        </div>
                                        <div id="map" style="height: 500px;">
                                            <!-- Div de la carte -->
                                            <div id="loading-on-map" class="map-spinner-container">
                                                <img src="{{ asset('img/spinner/dual-ring-orange.svg') }}" alt="Loading..." height="30">
                                                <span class="text-14">Chargement ...</span>
                                            </div>

                                            <!-- Info -->
                                            <div id="map-alert-info" class="map-alert-info alert alert-primary alert-left-bordered border-primary alert-dismissible d-flex p-1 p-md-3 mb-0 fade hidde" role="alert">
                                                <i class="gd-info-alt icon-text mr-2"></i>

                                                <div id="map-alert-info-item">
                                                    <span id="map-alert-info-text"><strong>Information</strong> alert</span>
                                                    <button type="button" class="btn btn-very-sm btn-outline-info ml-3" id="apply-btn" onclick="set_inputs_by_zone()">
                                                        {# <i class="gd-check icon-text icon-text-xs"></i> #}
                                                    </button>
                                                    <div id="effectif" class="d-none">
                                                        <p class="mb-1">Effectif des établissements critique sur cette zone.</p>
                                                        <ul class="list-unstyled">
                                                            <li>
                                                            <ul id="effectif-item">
                                                                <li>Hopital: <strong id="">02</strong></li>
                                                                <li>Prison: <strong>00</strong></li>
                                                                <li>Abonnée important: <strong>01</strong></li>
                                                            </ul>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                    <button type="button" class="close" onclick="set_map_alert_info_display('hidde', 'show')">
                                                        <i class="gd-close icon-text icon-text-xs" aria-hidden="true"></i>
                                                    </button>
                                                </div>
                                            </div>

                                            <!-- GetZone-Menu -->
                                            <div class="map-getzone-menu p-2 text-10 o-map">
                                                <button type="button" class="btn btn-sm btn-twitter mb-3" data-toggle="tooltip" data-placement="right" title="Propriété du zone séléctionée" onclick="getZoneProperty()">
                                                    <i class="gd-info align-middle mr-1"></i>
                                                </button><br>
                                                <button type="button" class="btn btn-sm btn-facebook mb-3" data-toggle="tooltip" data-placement="right" title="Recherche des zones par les postes séléctionées" onclick="searchZoneByPostes()">
                                                    <i class="gd-link align-middle mr-1"></i>
                                                </button><br>
                                                <button type="button" class="btn btn-sm btn-warning mb-3" data-toggle="tooltip" data-placement="right" title="Recherche des zones par vue actuelle" onclick="searchZoneByViewBonds()">
                                                    <i class="gd-map align-middle mr-1"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <br><br>
                                        <button type="submit" class="btn btn-primary float-right">Confirmer</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- End Form -->
                </div>
            </div>
        </div>
    </div>

{% endblock %}


{% block modals %}
{{ parent() }}

<!-- Search-Modal -->
<div id="search" class="modal fade" role="dialog" aria-labelledby="search" aria-hidden="true" data-modal-size="xl">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Recherche de zone</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="input-group">
                            <div class="input-group-append pointer">
                                <i class="gd-search icon-text icon-text-sm" id="btn-search-modal" onclick="searchZoneByFilter()"></i>
                                <div class="spinner-border spinner-border-sm text-info ml-4" role="status" id="modal-search-spinner" style="display: none;">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </div>
                            <input id="search-value" class="form-control form-control-icon-text" placeholder="Entrez votre recherche ..." type="text">
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row mt-3">
                    <div class="col-md-12">
                        <div class="table-responsive scroll-y-perfect" style="height: 300px;">
                            <table class="table table-striped table-bordered table-hover">
                                <thead>
                                    <tr class="text-center">
                                        <th>Ref</th>
                                        <th>Lieu</th>
                                        <th>Poste electrique</th>
                                    </tr>
                                </thead>
                                <tbody id="zone-table-body">
                                </tbody>
                            </table>
                            <div class="mb-0 text-center" id="no-result">
                                <div class="card-body text-muted"> Aucun élément</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="d-flex justify-content-center">
                    <a class="btn btn-light mr-2" id="btn-hidde-search-modal" href="#" data-dismiss="modal">Fermer</a>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- /Search-Modal -->

{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('leaflet/leaflet.js') }}"></script>
    <script src="https://unpkg.com/leaflet-fullscreen/dist/Leaflet.fullscreen.min.js"></script>
    <script src="https://unpkg.com/leaflet.pm@latest/dist/leaflet.pm.min.js"></script> <!-- Leaflet-Geoman JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script>
        var postes = ['P1', 'P2', 'P56'];
        var datalist = document.getElementById('postes-list');

        postes.forEach(function(poste) {
            var option = document.createElement('option');
            option.value = poste;
            datalist.appendChild(option);
        });

        $(document).ready(function() {
            $('#type').select2({
                placeholder: "Choisissez...", // Optionnel, pour un placeholder
                allowClear: true, // Permet de supprimer le choix actuel
                tags: true, // Active la fonctionnalité de saisie de texte libre
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            var addButton = document.getElementById('add-postcoupee-submit');
            var postesContainer = document.getElementById('postes-container');

            addButton.addEventListener('click', function(e) {
                e.preventDefault(); // Empêcher la soumission du formulaire si dans un formulaire
                var input = document.querySelector('.input-add-postecoupee');
                var posteValue = input.value.trim();

                if (posteValue) {
                    createPosteElement(posteValue);
                    input.value = ''; // Réinitialiser l'input après l'ajout
                }
            });

            window.createPosteElement = function(value) {
                var input = document.getElementById('postcoupee-value');
                var currentValue = input.value;
                
                // Ajouter la nouvelle valeur au champ caché
                if (currentValue) {
                    input.value = `${currentValue}-${value}`;
                } else {
                    input.value = value;
                }

                var posteElement = document.createElement('span');
                posteElement.className = 'badge badge-pill badge-complex bg-semi-soft-primary-darker text-white mr-1';
                posteElement.innerHTML = `
                    <span class="badge badge-sm badge-primary-darker rounded-circle mr-2 pointer"><i class="gd-close" style="font-size: 0.7em"></i></span>
                    <span>${value}</span>
                `;

                var closeIcon = posteElement.querySelector('.gd-close');
                closeIcon.addEventListener('click', function() {
                    // Supprimer l'élément du conteneur
                    postesContainer.removeChild(posteElement);

                    // Mettre à jour la valeur du champ caché en supprimant la valeur correspondante
                    var updatedValue = input.value.split('-').filter(item => item !== value).join('-');
                    input.value = updatedValue;
                });

                postesContainer.appendChild(posteElement);
            }

            window.addMultiInputElement = function(input, bg, group) {
                var input = document.querySelector(`.${input}`);
                var inputValue = input.value.trim();

                if (inputValue) {
                    createInputElement(inputValue, bg, group);
                    input.value = ''; // Réinitialiser l'input après l'ajout
                }
            }

            window.createInputElement = function(value, bg, group) {
                var input = document.getElementById(`${group}-value`);
                var currentValue = input.value;
                var inputs = document.getElementById(`${group}-container`);
                
                // Ajouter la nouvelle valeur au champ caché
                if (currentValue) {
                    input.value = `${currentValue}-${value}`;
                } else {
                    input.value = value;
                }

                var new_input = document.createElement('span');
                new_input.className = `badge badge-pill badge-complex bg-semi-soft-${bg} text-white mr-1 mt-1`;
                new_input.innerHTML = `
                    <span class="badge badge-sm badge-${bg} rounded-circle mr-2 pointer ${group}-close"><i class="gd-close" style="font-size: 0.7em"></i></span>
                    <span>${value}</span>
                `;

                var closeIcon = new_input.querySelector(`.${group}-close`);
                closeIcon.addEventListener('click', function() {
                    // Supprimer l'élément du conteneur
                    inputs.removeChild(new_input);

                    // Mettre à jour la valeur du champ caché en supprimant la valeur correspondante
                    var updatedValue = input.value.split('-').filter(item => item !== value).join('-');
                    input.value = updatedValue;
                });

                //console.log();

                inputs.appendChild(new_input);
            }

        });

    </script>
    <script>
        var map = L.map('map').setView([-18.922647647936802, 47.46631766551795], 16);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
        }).addTo(map);

        map.zoomControl.setPosition('bottomright');

        // Ajout du bouton plein écran
        L.control.fullscreen({
            position: 'topright',
            title: 'Plein écran',
            titleCancel: 'Quitter le plein écran'
        }).addTo(map);

        map.on('enterFullscreen', function(){
            if(window.console) window.console.log('plein écran activé');
        });

        map.on('exitFullscreen', function(){
            if(window.console) window.console.log('plein écran désactivé');
        });

        const options = {
            position: "topleft",
            drawMarker: false,
            drawPolygon: true,
            drawPolyline: false,
            drawCircle: false,
            drawCircleMarker: false,
            editPolygon: true,
            deleteLayer: true
        };

        map.pm.addControls(options);
        {# map.pm.disableDraw('Polygon'); #}

        var drawnPolygon;
        var zones_loaded;
        var zone_selected;

        function toWKT(coords) {
            let wkt = 'POLYGON((';
            coords[0].forEach((coord, index) => {
                wkt += `${coord.lng} ${coord.lat}`;
                if (index !== coords[0].length - 1) {
                    wkt += ', ';
                }
            });
            wkt += '))';
            return wkt;
        }

        function updateCoordinates(layer) {
            var coords = layer.getLatLngs();
            document.getElementById('coords').value = coords;
        }

        map.on('pm:create', function(e) {
            if (drawnPolygon) {
                map.removeLayer(drawnPolygon);
            }
            drawnPolygon = e.layer;
            updateCoordinates(e.layer);
            console.log('Nouvelle couche créée');

            // Écouter les modifications sur la nouvelle couche
            e.layer.on('pm:edit', function(x) {
                updateCoordinates(e.layer);
                console.log('Couches éditée');
            });
        });

        map.on('pm:remove', function(e) {
            if (e.layer === drawnPolygon) {
                document.getElementById('coords').value = '';
                drawnPolygon = null;
                console.log('Couche supprimée');
            }
            //console.log('Couche supprimée');
        });

        function set_inputs_by_zone() {
            document.getElementById('spec').value = zone_selected.specificite;

            // Diviser la chaîne en valeurs
            var postes = zone_selected.postes.split('-');
            var lieux = zone_selected.lieux.split('-');

            // Ajouter les badges à l'élément div
            document.getElementById('postes-container').innerHTML = "";
            document.getElementById('postcoupee-value').value = "";

            // document.getElementById('type').value = 'S1';
            document.getElementById('ref-zone').value = zone_selected.refZone;

            document.getElementById('lieu-list-container').innerHTML = "";
            document.getElementById('lieu-list-value').value = "";

            postes.forEach(function(post) {
                createPosteElement(post);
            });

            lieux.forEach(function(lieu) {
                createInputElement(lieu, 'primary', 'lieu-list');
            });

            var apply = document.getElementById('apply-btn');
            apply.innerHTML = `<i class="gd-check icon-text icon-text-xs"></i>`;
            apply.classList.add('b-none');
        }

        function set_map_alert_info_display(add, remove) {
            var alert = document.getElementById('map-alert-info');
            alert.classList.add(add);
            alert.classList.remove(remove);
        }

        function set_map_alert_propriete_display(add, remove) {
            var alert = document.getElementById('map-alert-propriete');
            alert.classList.add(add);
            alert.classList.remove(remove);
        }

        function set_map_alert_info_content(text, btn_txt, border, add_effectif) {
            if(text) {
                document.getElementById('map-alert-info-text').innerHTML = text;
            }

            var apply = document.getElementById('apply-btn');
            var effectif = document.getElementById('effectif');
            apply.innerHTML = btn_txt;
            if(border) {
                apply.classList.remove('b-none');
            } else {
                apply.classList.add('b-none');
            } 
            if(add_effectif) {
                effectif.classList.remove('d-none');
            } else {
                effectif.classList.add('d-none');
            } 
        }

        function add_result_tag_content(zones) {
            // Générer les liens pour la tag-cloud
            var tagCloudContainer = document.getElementById('result-tag-clouds');
            tagCloudContainer.innerHTML = "";
            zones.forEach(function(zone) {
                var tagLink = document.createElement('a');
                tagLink.href = "#";
                tagLink.className = "tag-cloud-link";
                tagLink.innerHTML = `${zone.refZone}`;
                tagLink.dataset.zone = JSON.stringify(zone);

                tagLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    zone_selected = JSON.parse(this.dataset.zone);

                    document.getElementById('idzone').value = zone_selected.id;

                    // Remove any previously drawn polygon
                    if (drawnPolygon) {
                        map.removeLayer(drawnPolygon);
                    }
                    console.log(zone_selected);

                    coords = zone_selected.coord.map(coord => [coord.longitude, coord.latitude]);
                    // Create a new polygon with the parsed coordinates
                    drawnPolygon = L.polygon(coords).addTo(map);

                    // Activer l'édition pour le polygone créé
                    drawnPolygon.pm.enable({ allowSelfIntersection: false });

                    // Fit the map view to the polygon bounds
                    map.fitBounds(drawnPolygon.getBounds());

                    // Update coordinates (if you have a specific function for this)
                    updateCoordinates(drawnPolygon);
                    // console.log('Polygon created and adapted to view');

                    // Add an event listener to update coordinates if the polygon is edited
                    drawnPolygon.on('pm:edit', function(e) {
                        updateCoordinates(drawnPolygon);
                        console.log('Polygon edited');
                        document.getElementById('idzone').value = 0;
                    });

                    // Handle polygon removal
                    drawnPolygon.on('pm:remove', function(e) {
                        if (e.layer === drawnPolygon) {
                            document.getElementById('coords').value = '';
                            drawnPolygon = null;
                            console.log('Polygon removed');
                        }
                    }); 

                    set_map_alert_info_display('show', 'hidde');
                    set_map_alert_info_content(`<strong>Adapter les données</strong> par cette zone`, 'Appliquer', true, false);
                });

                tagCloudContainer.appendChild(tagLink);
            });
        }

        function getBoundsView() {
            var bounds = map.getBounds();
            var coords = [
                [bounds.getSouth(), bounds.getWest()], // Coin sud-ouest
                [bounds.getNorth(), bounds.getEast()]  // Coin nord-est
            ];

            var view_bounds = L.rectangle(coords);

            return view_bounds.getLatLngs();
            //return boundsview;
        }

        function setModalResult(zones) {
            // Obtenir l'élément tbody du tableau
            let tbody = document.getElementById('zone-table-body');
            tbody.innerHTML = ""; // Vider le contenu existant du tableau

            // Parcourir les résultats et remplir le tableau
            if(zones.length == 0) {
                document.getElementById('no-result').classList.remove('d-none');
            } else {
                document.getElementById('no-result').classList.add('d-none');
                zones.forEach(function(zone) {
                    var tr = document.createElement('tr');
                    tr.className = "pointer text-center";
                    tr.innerHTML = `
                        <td class="py-3">${zone.refZone || '-'}</td>
                        <td class="py-3">${zone.lieux || '-'}</td>
                        <td class="py-3">${zone.postes || '-'}</td>
                    `;
                    tr.dataset.zone = JSON.stringify(zone);

                    tr.addEventListener('click', function(e) {
                        e.preventDefault();
                        zone_selected = JSON.parse(this.dataset.zone);

                        document.getElementById('btn-hidde-search-modal').click();

                        document.getElementById('idzone').value = zone_selected.id;

                        // Remove any previously drawn polygon
                        if (drawnPolygon) {
                            map.removeLayer(drawnPolygon);
                        }
                        console.log(zone_selected);

                        coords = zone_selected.coord.map(coord => [coord.longitude, coord.latitude]);
                        // Create a new polygon with the parsed coordinates
                        drawnPolygon = L.polygon(coords).addTo(map);

                        // Activer l'édition pour le polygone créé
                        drawnPolygon.pm.enable({ allowSelfIntersection: false });

                        // Fit the map view to the polygon bounds
                        map.fitBounds(drawnPolygon.getBounds());

                        // Update coordinates (if you have a specific function for this)
                        updateCoordinates(drawnPolygon);
                        // console.log('Polygon created and adapted to view');

                        // Add an event listener to update coordinates if the polygon is edited
                        drawnPolygon.on('pm:edit', function(e) {
                            updateCoordinates(drawnPolygon);
                            console.log('Polygon edited');
                            document.getElementById('idzone').value = 0;
                        });

                        // Handle polygon removal
                        drawnPolygon.on('pm:remove', function(e) {
                            if (e.layer === drawnPolygon) {
                                document.getElementById('coords').value = '';
                                drawnPolygon = null;
                                console.log('Polygon removed');
                            }
                        }); 

                        set_map_alert_info_display('show', 'hidde');
                        set_map_alert_info_content(`<strong>Adapter les données</strong> par cette zone`, 'Appliquer', true, false);
                    });

                    tbody.appendChild(tr);
                });

            }
        }

        function searchZone(data) {
            //console.log();
            //console.log(JSON.stringify({ bounds: rectangle.getLatLngs() }));

            // Mettre à jour les limites de la carte avec les nouvelles limites
            // map.fitBounds(newBounds, { padding: [50, 50] }); // Le padding peut être ajusté selon vos besoins
            // console.log(boundsview);

            $.ajax({
                url: "{{ path('search_zone') }}",
                method: 'POST',
                contentType: 'application/json',  // Ajout du type de contenu JSON
                data: JSON.stringify(data),  // Conversion en JSON
                beforeSend: function() {
                    document.getElementById('loading-on-map').style.display = "block"; // modal-search-spinner
                    document.getElementById('modal-search-spinner').style.display = "block";
                    document.getElementById('btn-search-modal').style.display = "none"; //
                    
                },
                success: function(response) {
                    //console.log(response);
                    zones_loaded = [];

                    // Convertissez la chaîne JSON en objet JavaScript
                    let data = JSON.parse(response);

                    zones_loaded = data.zones;
                    // console.log(zones_loaded);

                    //updateMapLayers();
                    document.getElementById('loading-on-map').style.display = "none";
                    document.getElementById('modal-search-spinner').style.display = "none";
                    document.getElementById('btn-search-modal').style.display = "block"; //

                    add_result_tag_content(zones_loaded);
                    setModalResult(zones_loaded);

                    set_map_alert_info_display('show', 'hidde');
                    if(zones_loaded.length === 0) {
                        set_map_alert_info_content(`<strong>Aucune donnée</strong> n'a été trouvée.`, '', false, false);
                    } else {
                        set_map_alert_info_content(`<strong>0${zones_loaded.length} élement(s)</strong> trouvée.`, '', false, false);
                    }
                },
                error: function() {
                    // Masquer le spinner en cas d'erreur de la requête AJAX
                    document.getElementById('loading-on-map').style.display = "none";
                }
            });
            //document.getElementById('loading-on-map').style.display = "none";
        }

        function searchZoneByViewBonds() {
            var boundsview = getBoundsView();
            var data = {coord: boundsview};
            searchZone(data);
        }

        function getZoneProperty() {
            set_map_alert_info_display('show', 'hidde');
            set_map_alert_info_content(`<strong class="mb-1">Information</strong>`, '', false, true);
        }

        function searchZoneByPostes() {
            var postes = document.getElementById('postcoupee-value').value;
            if(postes !== '') {
                // Séparer la chaîne en un tableau
                postes = postes.split('-')
                    .sort()
                    .join('-');

                var data = {postes: postes};
                searchZone(data);
            } else {
                set_map_alert_info_display('show', 'hidde');
                set_map_alert_info_content(`<strong>Aucun poste</strong> n'a été séléctionée`, '', false, false);
            }
        }

        function searchZoneByFilter() {
            var motclee = document.getElementById('search-value').value;
            if(motclee !== '') {
                // Séparer la chaîne en un tableau
                motclee_triee = motclee.split('-')
                    .sort()
                    .join('-');

                var data = {
                    ref: motclee,
                    group: motclee_triee
                };
                searchZone(data);
            } else {
                set_map_alert_info_display('show', 'hidde');
                set_map_alert_info_content(`<strong>Aucun poste</strong> n'a été séléctionée`, '', false, false);
            }
        }
    </script>
{% endblock %}

