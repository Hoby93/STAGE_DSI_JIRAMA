{% extends 'base.html.twig' %}

{% block title %}Jirama | Effectif générale{% endblock %}

{% block menuactive %}stat{% endblock %}

{% block othercss %}
    <link rel="stylesheet" href="{{ asset('demo/chartist.css') }}">
    <link rel="stylesheet" href="{{ asset('demo/chartist-plugin-tooltip.css') }}">
{% endblock %}

{% block body %}
<div class="py-4 px-3 px-md-4">
    <div class="mb-md-0 d-flex justify-content-between">
        <h1 class="h3 mb-2">Tableau de bord</h1>
    </div>
    {# <div class="mb-5 text-muted">
        <h5>
            Consultez le Tableau de Bord Administrateur pour Gérer les Constructions Immobilières, <br>
            Visualiser les Profits et les Propriétés Liées à la Construction.
        </h5>
    </div> #}

    <div class="row">

        <div class="col-12">
            <div class="card mb-md-4">
            <div class="row">
                <div class="col-md-6 card-header ml-3 pb-0 mb-0">
                    <!-- Breadcrumb -->
                    <nav class="d-md-block" aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a>Tableau de bord</a>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-muted" href="{{ path('stat_coupure') }}">Rapport de coupure</a>
                            </li>
                            <li class="breadcrumb-item active" aria-current="page">Fiche</li>
                        </ol>
                    </nav>
                    <!-- End Breadcrumb -->
                </div>
            </div>
            <div class="card-body pt-2">
                <div class="row">
                    <div class="col-md-12 table-xl">
                        <div class="tab-pane show" id="litecoin" role="tabpanel">
                            <div class="toolbar row mb-3">
                                <div class="card-header">
                                    <h5 class="h6 text-uppercase font-weight-semi-bold mb-0">{{ gpniv }} {{niv}}</h5>
                                </div>
                                <div class="col ml-auto">
                                    <div class="dropdown float-right">
                                        <label class="border-text-label">Date</label>
                                        <input type="month" id="date-selector" name="date-selector" value="2024-08" class="form-control form-inline" style="text-transform: capitalize;width: unset !important; display: unset;">
                                        <button style="width: 125px;" class="btn btn-facebook dropdown-toggle mb-1" type="button" id="month-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <span class="text-capitalize" id="date-group-label">Date</span>
                                            <i class="gd-angle-down icon-text icon-text-xs align-middle ml-3"></i>
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="month-selector">
                                            <li><a class="dropdown-item date-group jour" onclick="setDateGroupe('jour')">Jour</a></li>
                                            <li><a class="dropdown-item date-group mois" onclick="setDateGroupe('mois')">Mois</a></li>
                                            <li><a class="dropdown-item date-group annee" onclick="setDateGroupe('annee')">Année</a></li>
                                        </ul>
                                    </div>
                                    <div class="float-right mr-2">
                                        <button type="button" class="btn ml-auto" onclick="refresh()">
                                            <i class="gd-reload" id="btn-refresh"></i>
                                            <div class="spinner-border spinner-border-sm text-info" role="status" id="list-stat-spinner">
                                                <span class="sr-only">Loading...</span>
                                            </div>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="row text-center mt-4 mb-4 mb-md-5 mb-2">
                                <div class="col-6 col-md-3 mb-3 mb-md-0">
                                    <div class="h4 mb-1">
                                        <span id="total-coupure">158</span><sup class="h5"></sup>
                                    </div>
                                    <small class="text-muted">Heure total de coupure</small>
                                </div>

                                <div class="col-6 col-md-3 mb-3 mb-md-0 border-left">
                                    <div class="h3 mb-0">
                                        <span id="freq-coupure">12</span>
                                    </div>
                                    <small class="text-muted">Frequence de coupure</small>
                                </div>

                                <div class="col-12 col-md-3 border-left">
                                    <div class="h4 mb-1">
                                        <span id="heure-freq-coupure">10h00 - 12h00</span>
                                    </div>
                                    <small class="text-muted">Heure frequent</small>
                                </div>

                                <div class="col-12 col-md-3 border-left">
                                    <div class="h4 mb-1">
                                        <span id="avg-duree-coupure">3h30</span>
                                    </div>
                                    <small class="text-muted">AVG duree de coupure</small>
                                </div>
                            </div>

                            <div class="card-body text-center mb-10">
                                <a class="link switch-chart hcoupure d-inline-block mr-4 active" onclick="switchChartType('hcoupure')">
                                    Heure de coupure <i class="gd-pulse icon-text ml-1" style="color: #8069f2"></i>
                                </a>
                                <a class="link switch-chart fcoupure d-inline-block ml-4" onclick="switchChartType('fcoupure')">
                                    Frequence de coupure <i class="gd-pulse icon-text ml-1" style="color: #0cdcB9"></i>
                                </a>
                            </div>
                            <!-- Demo Chart -->
                            <div id="chart-container" style="margin-left: -2%;">
                                <!-- Chart Graphique ici -->
                            </div>
                            <!-- End Demo Chart -->
                            <hr>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card mb-3 mb-md-4">
                <div class="card-header">
                    <h5 class="h6 text-uppercase font-weight-semi-bold mb-0">Liste Coupures</h5>
                </div>

                <div class="card-body pt-0 pl-2">
                    <div class="col-md-12 mt-4">
                        <table class="table table-responsive-xl scroll-x-perfect table-bordered text-nowrap mb-0">
                            <thead>
                            <tr>
                                <th class="font-weight-semi-bold border-top-0 py-2" id="tab-niv-col" style="text-transform: capitalize;">
                                    <!-- Niveau --> Du
                                </th>
                                <th class="font-weight-semi-bold border-top-0 py-2">
                                    Heure total coupure
                                </th>
                                <th class="font-weight-semi-bold border-top-0 py-2">
                                    Freq. coupure
                                </th>
                                <th class="font-weight-semi-bold border-top-0 py-2">
                                    Heure freq. coupure 
                                </th>
                                <th class="font-weight-semi-bold border-top-0 py-2">
                                    AVG Duree coupure (h)
                                </th>
                                <th class="font-weight-semi-bold border-top-0 py-2">
                                    Detail
                                </th>
                            </tr>
                            </thead>
                            <tbody id="stat-table-body">
                            </tbody>
                        </table>
                    <div>
                    <div class="mb-0 pt-2 text-center d-none" id="no-result">
                        <div class="card-body text-muted"> Aucun élément trouvée</div>
                    </div>
                    {# <div class="col-md-12">
                        <nav aria-label="Table Paging" class="mb-0 mt-4 text-muted" id="pagination">
                            <div class="row">
                                <div class="col-md-6 text-muted">Page <span id="curr-page">1</span> sur <span id="count-page">1</span></div>
                                <div class="col-md-6">
                                    <ul class="pagination justify-content-end mb-0">
                                        <!-- Pagination items will be dynamically inserted here -->
                                    </ul>
                                </div>
                            </div>
                        </nav>
                    </div> #}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/apexcharts.min.js') }}"></script>
    <script src="{{ asset('demo/chartist.js') }}"></script>
    <script src="{{ asset('demo/chartist-plugin-tooltip.js') }}"></script>
    <script src="{{ asset('demo/resizeSensor.js') }}"></script>
    <script src="{{ asset('demo/gd.chartist-area.js') }}"></script>
    <script src="{{ asset('demo/gd.chartist-bar.js') }}"></script>
    <script src="{{ asset('demo/gd.chartist-donut.js') }}"></script>

    <script src="{{ asset('js/session.js') }}"></script>

    <script>
        window.onload = function() {
            initFilter();
            refresh();
        };

        let chart;
        var dategroup = 'mois';

        var gpniv = '{{ gpniv }}';
        var niv = '{{ niv }}';

        const months = ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'];

        const dateType = new Map([
            ['jour', 'date'],
            ['mois', 'month'],
            ['annee', 'number']
        ]);

        var chart_data = {};

        function initFilter() {
            var filter = getFilterFromSession();
            if(filter) {
                setDateGroupe(filter.gpdate);
                document.getElementById('date-selector').value = filter.date;
                console.log(filter);
            } else {
                console.log('no filter found');
            }
        }

        function getDateGroupAxis2(dateGroup, dateValue) {
            switch (dateGroup) {
                case 'mois':
                    const year = parseInt(dateValue.slice(0, 4));
                    const month = parseInt(dateValue.slice(5, 7)) - 1;
                    
                    const lastDayOfMonth = new Date(year, month + 1, 0).getDate();
                    return Array(lastDayOfMonth).fill().map((_, i) => `${(i + 1).toString().padStart(2, '0')}/${(month+1).toString().padStart(2, '0')}/${year}`); 
                case 'annee':
                    return months;
                default:
                    // throw new Error('Invalid dateGroup parameter');
                    return []
            }
        }

        // Fonction pour formater la date du jour selon le format choisi
        function currentDateGroupFormat(selectedOption) {
            // Obtenir la date actuelle
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = ('0' + (currentDate.getMonth() + 1)).slice(-2); // Mois avec zéro au début
            const day = ('0' + currentDate.getDate()).slice(-2); // Jour avec zéro au début

            if (selectedOption === 'jour') {
                return year + '-' + month + '-' + day; // Format 'YYYY-MM-DD' pour jour
            } else if (selectedOption === 'mois') {
                return year + '-' + month; // Format 'YYYY-MM' pour mois
            } else if (selectedOption === 'annee') {
                return year; // Format 'YYYY' pour année
            }
            return '';
        }

        // Fonction pour mettre à jour le groupe de date
        function setDateGroupe(group) {
            // Supprimer la classe .d-none de tous les éléments .date-group
            $('.date-group').removeClass('d-none');
            document.getElementById('date-group-label').innerHTML = group;

            // Ajouter la classe .d-none à tous les éléments sauf celui avec la classe .jour
            $(`.${group}`).addClass('d-none');


            // Mettre à jour la valeur de dategroup
            dategroup = group;

            var inputElement = $('#date-selector');
            inputElement.attr('type', dateType.get(group));
            inputElement.val(currentDateGroupFormat(group)); // Initialiser la valeur de l'input avec la date formatée
        }

        function matchDateGroupFromData2(dategroup, mydata, dateaxis) {
            var hcoupures = [];
            var fqcoupures = [];

            for (var i = 0; i < dateaxis.length; i++) {
                var coupureMatch = mydata.find(coupure => { // Parcourir les donnees chargees
                    // comparer et completer les dates qui ont une valeur
                    // console.log(coupure.niv_date);
                    if(dategroup === 'mois') {
                        return coupure.niv_date.split('-')[2] === dateaxis[i].split('/')[0]
                    } else {
                        return months[parseInt(coupure.niv_date.split('-')[1]) - 1] === dateaxis[i]
                    }
                });

                if (coupureMatch) {
                    // Convertir heure_total_coupure en format décimal
                    var hours = parseFloat(coupureMatch.heure_total_coupure.split(':')[0]);
                    var minutes = parseFloat(coupureMatch.heure_total_coupure.split(':')[1]);
                    var decimalTime = hours + (minutes / 60);
                    hcoupures.push({"meta":dateaxis[i],"value":decimalTime.toFixed(2)});
                    fqcoupures.push({"meta":dateaxis[i],"value":coupureMatch.frequence_coupure});
                } else {
                    hcoupures.push({"meta":dateaxis[i],"value":0});
                    fqcoupures.push({"meta":dateaxis[i],"value":0});
                }
            }

            return {
                hcoupures: hcoupures,
                fqcoupures: fqcoupures
            };
        }

        function switchChartType(type) {
            // Supprimer la classe active de tous les liens
            document.querySelector('.link.switch-chart.active').classList.remove('active');
            document.querySelector(`.link.switch-chart.${type}`).classList.add('active');

            if(type === 'hcoupure') {
                createDemoChart(chart_data.xaxis, chart_data.yaxis.hcoupures, type);
            } else {
                createDemoChart(chart_data.xaxis, chart_data.yaxis.fqcoupures, type);
            }
        }

        // Parametre du chart en fonction du type et date
        function chartCustomizedData(xaxis, yaxis, type) {
            var high, labels, series, qty, lineColor, fillColor, unite;

            if (dategroup === 'mois') {
                // Créer xaxis_label avec format 'Mon DD'
                const xaxis_label = xaxis.map(dateStr => {
                    const [day, month, year] = dateStr.split('/');
                    const monthAbbrev = months[parseInt(month) - 1]; 
                    return `${monthAbbrev}. ${parseInt(day)}`;
                });
                high = 30, labels = xaxis_label, series = yaxis, qty = 7;
                if (type === 'fcoupure') {
                    high = 10;
                }
            } else {
                let datevalue = document.getElementById('date-selector').value;
                const yaxis_series = yaxis.map(value => ({
                    "meta": `${value.meta}. ${datevalue}`,
                    "value": value.value
                }));
                high = 50, labels = xaxis, series = yaxis_series, qty = 12;
                if (type === 'fcoupure') {
                    high = 20;
                }
            }

            if(type === 'fcoupure') {
                lineColor = ["#0cdcB9"], fillColor = ["rgba(28,240,221,.6)","rgba(255,255,255,.6)"], unite = "x";
            } else {
                lineColor = ["#8069f2"], fillColor = ["rgba(128,105,242,.7)","rgba(255,255,255,.6)"], unite = "h";
            }

            // console.log(labels);

            return {
                high: high, labels: labels, series: series, unite: unite,
                qty: qty, lineColor: lineColor, fillColor: fillColor
            };
        }

        function createDemoChart(xaxis, yaxis, type) {
            var chart_ctn = document.getElementById('chart-container');
            chart_ctn.innerHTML = ""; // Effacer l'ancienne chart
            
            const cst_data = chartCustomizedData(xaxis, yaxis, type);

            // Création de la nouvelle chart
            var chart_div = `
                <div class="js-area-chart chart chart--axis-x--nowrap chart--points-invisible position-relative mh-15_6 safari-overflow-hidden pt-4 pt-md-5 pb-1"
                    data-series='${JSON.stringify([[...cst_data.series]])}'
                    data-labels='${JSON.stringify(cst_data.labels)}'
                    data-labels-qty="${JSON.stringify(cst_data.qty)}"
                    data-labels-start-from="1"
                    data-height="325"
                    data-mobile-height="75"
                    data-high="${JSON.stringify(cst_data.high)}"
                    data-low="1000"
                    data-offset-x="30"
                    data-offset-y="60"
                    data-is-line-smooth='["simple"]'
                    data-line-width='["1px"]'
                    data-line-colors='${JSON.stringify(cst_data.lineColor)}'
                    data-fill-opacity=".4"
                    data-is-fill-colors-gradient="true"
                    data-fill-colors='${JSON.stringify([cst_data.fillColor])}'
                    data-text-size-x="14px"
                    data-text-color-x="#4a4e69"
                    data-text-offset-top-x="10"
                    data-text-align-axis-x="center"
                    data-text-size-y="14px"
                    data-text-color-y="#868e96"
                    data-is-show-tooltips="true"
                    data-is-tooltip-divided="true"
                    data-tooltip-custom-class="chart-tooltip--divided chart-tooltip__value--bg-black chart-tooltip__meta--bg-primary small text-white"
                    data-tooltip-currency="${cst_data.unite}"
                    data-is-tooltip-currency-reverse="true"
                    data-is-show-points="true"
                    data-point-custom-class='chart__point--donut chart__point--has-line-helper chart__point--border-xxs border-primary rounded-circle'
                    data-point-dimensions='{"width":8,"height":8}'>
                    <div class="card-body text-center ct-no-result">
                        ${xaxis.length === 0 ? "Pas de chart graphique" : ""}
                    </div>
                </div>
            `;

            chart_ctn.innerHTML = chart_div;

            // Initialiser le graphique avec les nouvelles données
            $.GDCore.components.GDChartistArea.init('.js-area-chart');
        }

        function refresh() {
            fetchStatCoupure();
            //console.log(axis);
        }

        function setPageLoading(isLoad) {
            var spinner = document.getElementById('list-stat-spinner');
            var refresh = document.getElementById('btn-refresh');
            if(isLoad) {
                spinner.style.display = "block";
                refresh.style.display = "none";
            } else {
                spinner.style.display = "none";
                refresh.style.display = "block";
            }
        }

        function setStatGeneralContent(gen) {
            document.getElementById('total-coupure').innerHTML = gen ? gen['heure_total_coupure'] : '00:00:00';
            document.getElementById('freq-coupure').innerHTML = gen ? gen['frequence_coupure'] : '0';
            document.getElementById('heure-freq-coupure').innerHTML = gen ? gen['heure_coupure_frequent'] : '-';
            document.getElementById('avg-duree-coupure').innerHTML = gen ? gen['duree_moyenne_coupure'].substring(0, 8) : '00:00:00';
        }

        function fetchStatCoupure() {
            let datevalue = document.getElementById('date-selector').value;
            var data = {
                niv: gpniv,
                motclee: niv,
                dategroupe: dategroup,
                datevalue: datevalue
            };

            //console.log(data);

            $.ajax({
                url: "{{ path('fiche_stat_coupure_data') }}",
                method: 'POST',
                contentType: 'application/json',  // Ajout du type de contenu JSON
                data: JSON.stringify(data),  // Conversion en JSON
                beforeSend: function() {
                    setPageLoading(true);
                },
                success: function(response) {
                    //console.log(response);

                    // Convertissez la chaîne JSON en objet JavaScript
                    let res = JSON.parse(response);
                    data = res.stats;

                    // Obtenir l'élément tbody du tableau
                    let tbody = document.getElementById('stat-table-body');
                    // document.getElementById('tab-niv-col').innerHTML = niv;
                    tbody.innerHTML = ""; // Vider le contenu existant du tableau

                    var _xaxis = getDateGroupAxis2(dategroup, datevalue);
                    var _yaxis = matchDateGroupFromData2(dategroup, data.results, _xaxis);

                    chart_data = {
                        xaxis: _xaxis,
                        yaxis: _yaxis
                    };
                    createDemoChart(_xaxis, _yaxis.hcoupures, 'hcoupure');
                    // timeChart();

                    // Parcourir les résultats et remplir le tableau
                    if(data.results.length == 0) {
                        setStatGeneralContent(null);
                        document.getElementById('no-result').classList.remove('d-none');
                    } else {
                        setStatGeneralContent(data.general[0]);
                        document.getElementById('no-result').classList.add('d-none');

                        data.results.forEach(function(result) {
                            let row = `
                                <tr>
                                    <td class="py-3">${result['niv_date']}</td>
                                    <td class="py-3 text-center">${result['heure_total_coupure']}</td>
                                    <td class="py-3 text-right">${result['frequence_coupure']}</td>
                                    <td class="py-3 text-center">${result['heure_coupure_frequent']}</td>
                                    <td class="py-3 text-center">${result['duree_moyenne_coupure'].substring(0, 8)}</td>
                                    <td class="p-0 py-3">
                                        <a class="unfold-link media align-items-center text-nowrap ml-3 p-0" href="{{ path('fiche_stat_coupure') }}">
                                            <i class="gd-info-alt unfold-item-icon mr-3"></i>
                                        </a>
                                    </td>
                                </tr>
                            `;
                            tbody.insertAdjacentHTML('beforeend', row);
                        });
                    }

                    // updatePaginationIndication();

                    //console.log(coupures);
                    setPageLoading(false);
                },
                error: function() {
                    // Masquer le spinner en cas d'erreur de la requête AJAX
                    setPageLoading(false);
                }
            });
        }
    </script>
    <script>
        $.GDCore.components.GDChartistArea.init('.js-area-chart');
        $.GDCore.components.GDChartistBar.init('.js-bar-chart');
        $.GDCore.components.GDChartistDonut.init('.js-donut-chart');
    </script>
{% endblock %}